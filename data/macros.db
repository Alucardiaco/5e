{"_id":"5eu77Suak4qjZ998","name":"Rol Ability Score","permission":{"default":0,"ya8tMg8pA5Jg1ZSl":3},"type":"chat","sort":100001,"flags":{},"scope":"global","command":"/r 4d6kh3","author":"ya8tMg8pA5Jg1ZSl","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"6knhCxXPq4cHUh2h","name":"Combat Tracker AC HP","permission":{"default":0,"y5gmtwxmW3A5ZuOP":3,"acq5dYUrPaSyWY1J":3},"type":"script","sort":100001,"flags":{},"scope":"global","command":"// Adds the actor's AC to the combat tracker. Then toggles between HP and AC\r\nconst a = \"attributes.ac.value\";\r\nconst b = \"attributes.hp.value\";\r\n\r\nif (game.combat.settings.resource == a) {\r\n  game.settings.set('core', 'combatTrackerConfig', {resource: b, skipDefeated: true});\r\n} else {\r\n  game.settings.set('core', 'combatTrackerConfig', {resource: a, skipDefeated: true});\r\n}\r\nui.combat.updateTrackedResources();\r\n","author":"acq5dYUrPaSyWY1J","img":"icons/svg/clockwork.svg","actorIds":[]}
{"name":"New Macro","permission":{"default":0,"xyflGiSB5wF21JJc":3},"type":"chat","sort":100001,"flags":{},"scope":"global","command":"","author":"xyflGiSB5wF21JJc","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"AE4YgW8JDRApXU2X"}
{"_id":"E7ezvgTZ8fpNY0EO","name":"Stealth Check","permission":{"default":0,"y5gmtwxmW3A5ZuOP":3,"acq5dYUrPaSyWY1J":3},"type":"script","sort":100001,"flags":{},"scope":"global","command":"// Grabs selected tokens and rolls a stealth check against all other tokens passive perception on the map. Then returns the result.\r\n\r\n// getting all actors of selected tokens\r\nlet actors = canvas.tokens.controlled.map(({ actor }) => actor);\r\n\r\n// if there are no selected tokens, roll for the player's character.\r\nif (actors.length < 1) {\r\n  actors = game.users.entities.map(entity => {\r\n    if (entity.active && entity.character !== null) {\r\n      return entity.character;\r\n    }\r\n  });\r\n}\r\nconst validActors = actors.filter(actor => actor != null);\r\n\r\nlet messageContent = 'pp = passive perception<br>';\r\n\r\n// roll for every actor\r\nfor (const selectedActor of validActors) {\r\n  const stealthMod = selectedActor.data.data.skills.ste.total; // stealth roll\r\n  const stealth = new Roll(`1d20+${stealthMod}`).roll().total; // rolling the formula\r\n  messageContent += `<hr><h3>${selectedActor.name} stealth roll was a <b>${stealth}</b>.</h3>`; // creating the output string\r\n\r\n  // grab a list of unique tokens then check their passive perception against the rolled stealth.\r\n  const uniqueActor = {};\r\n  const caughtBy = canvas.tokens.placeables\r\n    .filter(token => !!token.actor)\r\n    .filter(({ actor }) => { // filter out duplicate token names. ie: we assume all goblins have the same passive perception\r\n      if (uniqueActor[actor.name]) {\r\n        return false;\r\n      }\r\n      uniqueActor[actor.name] = true;\r\n      return true;\r\n    })\r\n    .filter(({ actor }) => {\r\n      return selectedActor.id !== actor.id; // Don't check to see if the token sees himself.\r\n    })\r\n    .filter(({ actor }) => actor.data.data.skills.prc.passive >= stealth); // check map tokens passives with roller stealth\r\n\r\n  if (!caughtBy.length) {\r\n    messageContent += 'Stealth successful!<br>';\r\n  } else {\r\n    messageContent += 'Stealth questionable:<br>';\r\n    caughtBy.map(({ actor }) => {\r\n      messageContent += `<b>${actor.name}</b> pp(${actor.data.data.skills.prc.passive}).<br>`;\r\n    });\r\n  }\r\n}\r\n\r\n// create the message\r\nconst chatData = {\r\n  user: game.user._id,\r\n  speaker: game.user,\r\n  content: messageContent,\r\n  whisper: game.users.entities.filter((u) => u.isGM).map((u) => u._id),\r\n};\r\nChatMessage.create(chatData, {});\r\n","author":"acq5dYUrPaSyWY1J","img":"icons/svg/eye.svg","actorIds":[]}
{"_id":"J5w3dNm5tecB1BYL","name":"Roll Initiatives","permission":{"default":0,"y5gmtwxmW3A5ZuOP":3,"acq5dYUrPaSyWY1J":3},"type":"script","sort":100001,"flags":{},"scope":"global","command":"/**\r\n * Takes all selected tokens and adds them to the combat tracker. Then rolls initative for all NPC tokens.\r\n */\r\n\r\nasync function start() {\r\n  for ( let token of canvas.tokens.controlled) {      \r\n    if (token.inCombat === false){\r\n      // Change 'rollNPC' to 'rollAll' if you want to roll for your players as well.\r\n      await token.toggleCombat().then(() => game.combat.rollNPC(null, {rollMode: 'gmroll'}));\r\n    }\r\n  }\r\n}\r\n\r\nstart();\r\n","author":"acq5dYUrPaSyWY1J","img":"icons/svg/d20-highlight.svg","actorIds":[]}
{"_id":"ehDFvUMO5rO2Qr9d","name":"D20","permission":{"default":0,"acq5dYUrPaSyWY1J":3},"type":"chat","sort":100001,"flags":{},"scope":"global","command":"/r 1d20","author":"acq5dYUrPaSyWY1J","img":"icons/svg/d20-grey.svg","actorIds":[]}
{"_id":"n9zDExghJSwfTMh2","name":"Roll Ability Scores","permission":{"default":0,"acq5dYUrPaSyWY1J":3},"type":"chat","sort":100001,"flags":{},"scope":"global","command":"/r 4d6kh3","author":"acq5dYUrPaSyWY1J","img":"icons/svg/d20.svg","actorIds":[]}
{"name":"Stealth Check","permission":{"default":0,"y5gmtwxmW3A5ZuOP":3,"acq5dYUrPaSyWY1J":3},"type":"script","folder":null,"sort":100001,"flags":{},"scope":"global","command":"// Grabs selected tokens and rolls a stealth check against all other tokens passive perception on the map. Then returns the result.\n\n// getting all actors of selected tokens\nlet actors = canvas.tokens.controlled.map(({ actor }) => actor);\n\n// if there are no selected tokens, roll for the player's character.\nif (actors.length < 1) {\n  actors = game.users.entities.map(entity => {\n    if (entity.active && entity.character !== null) {\n      return entity.character;\n    }\n  });\n}\nconst validActors = actors.filter(actor => actor != null);\n\nlet messageContent = 'pp = passive perception<br>';\n\n// roll for every actor\nfor (const selectedActor of validActors) {\n  const stealthMod = selectedActor.data.data.skills.ste.total; // stealth roll\n  const stealth = new Roll(`1d20+${stealthMod}`).roll().total; // rolling the formula\n  messageContent += `<hr><h3>${selectedActor.name} stealth roll was a <b>${stealth}</b>.</h3>`; // creating the output string\n\n  // grab a list of unique tokens then check their passive perception against the rolled stealth.\n  const uniqueActor = {};\n  const caughtBy = canvas.tokens.placeables\n    .filter(token => !!token.actor)\n    .filter(({ actor }) => { // filter out duplicate token names. ie: we assume all goblins have the same passive perception\n      if (uniqueActor[actor.name]) {\n        return false;\n      }\n      uniqueActor[actor.name] = true;\n      return true;\n    })\n    .filter(({ actor }) => {\n      return selectedActor.id !== actor.id; // Don't check to see if the token sees himself.\n    })\n    .filter(({ actor }) => actor.data.data.skills.prc.passive >= stealth); // check map tokens passives with roller stealth\n\n  if (!caughtBy.length) {\n    messageContent += 'Stealth successful!<br>';\n  } else {\n    messageContent += 'Stealth questionable:<br>';\n    caughtBy.map(({ actor }) => {\n      messageContent += `<b>${actor.name}</b> pp(${actor.data.data.skills.prc.passive}).<br>`;\n    });\n  }\n}\n\n// create the message\nconst chatData = {\n  user: game.user._id,\n  speaker: game.user,\n  content: messageContent,\n  whisper: game.users.entities.filter((u) => u.isGM).map((u) => u._id),\n};\nChatMessage.create(chatData, {});\n","author":"acq5dYUrPaSyWY1J","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"no9YHwyeO6WLcDtc"}
{"name":"New Macro","permission":{"default":0,"PgXKewupn42mHUS8":3},"type":"chat","sort":100001,"flags":{},"scope":"global","command":"","author":"PgXKewupn42mHUS8","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"pD3rs7zqOztMmHXc"}
{"_id":"wLZYvm8ciNPt5u5D","name":"Share Image Via URL","permission":{"default":0,"y5gmtwxmW3A5ZuOP":3,"acq5dYUrPaSyWY1J":3},"type":"script","sort":100001,"flags":{},"scope":"global","command":"/**\n * Share an image to all players when you have an image URL\n * Author: @Krishmero#1792\n */\n\nlet imagePopup = (imageUrl) => {\n\t// Display the image popout and share it.\n\tconst ip = new ImagePopout(imageUrl);\n\tip.render(true);\n\tip.shareImage();\n};\n\nlet chatDialog = (imageUrl) => {\n\tChatMessage.create({\n\t\tuser: game.user._id,\n\t\tcontent: `<img src=\"${imageUrl}\" />`,\n\t\ttype: CONST.CHAT_MESSAGE_TYPES.OOC\n\t});\n};\n\nlet selectOptions = game.user.isGM ? `\n<div style=\"display: inline-block; width: 100%; margin-bottom: 10px\">\n\t<label for=\"output-options\" style=\"margin-right: 10px\">Output Options:</label>\n\t<select id=\"output-options\" />\n\t\t<option value=\"popup\">Popup</option>\n\t\t<option value=\"chat\">Chat</option>\n\t\t<option value=\"both\">Both</option>\n\t</select>\n</div>\n<br />\n` : '';\n\nnew Dialog({\n\ttitle: `Share Image via URL`,\n\tcontent: `\n\t\t<form>\n\t\t\t${selectOptions}\n\t\t\t<div style=\"display: flex; width: 100%; margin-bottom: 10px\">\n\t\t\t\t<label for=\"image-url\" style=\"white-space: nowrap; margin-right: 10px; padding-top:4px\">Image URL:</label>\n\t\t\t\t<input type=\"text\" id=\"image-url\" name=\"image-url\" />\n\t\t\t</div>\n\t\t</form>\n\t`,\n\tbuttons: {\n\t\tyes: {\n\t\t\ticon: \"<i class='fas fa-check'></i>\",\n\t\t\tlabel: `Share`,\n\t\t\tcallback: (html) => {\n\t\t\t\tlet imageUrl = html.find('#image-url').val();\n\t\t\t\tlet permission = html.find('select#output-options')[0]?.value || null;\n\t\t\t\tif (!imageUrl) {\n\t\t\t\t\treturn ui.notifications.info(\"You did not provide a valid image.\");\n\t\t\t\t}\n\t\t\t\tif (game.user.isGM && ['popup', 'both'].includes(permission)) {\n\t\t\t\t\timagePopup(imageUrl);\n\t\t\t\t}\n\t\t\t\tif (!game.user.isGM || ['chat', 'both'].includes(permission)) {\n\t\t\t\t\tchatDialog(imageUrl);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tno: {\n\t\t\ticon: \"<i class='fas fa-times'></i>\",\n\t\t\tlabel: `Cancel`\n\t\t},\n\t},\n\tdefault: \"yes\"\n}).render(true)","author":"acq5dYUrPaSyWY1J","img":"https://assets.forge-vtt.com/5eca8ef741b1725ca4531584/Game%20Banners/5811770a7ed82efa02c03fcc84ec5c25.jpg","actorIds":[]}
